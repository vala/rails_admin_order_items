:ruby
  query = params[:query]
  params = request.params.except(:authenticity_token, :action, :controller, :utf8, :bulk_export, :_pjax)
  params.delete(:query) if params[:query].blank?
  params.delete(:sort_reverse) unless params[:sort_reverse] == 'true'
  sort_reverse = params[:sort_reverse]
  sort = params[:sort]
  params.delete(:sort) if params[:sort] == @model_config.list.sort_by.to_s

  export_action = RailsAdmin::Config::Actions.find(:export, { :controller => self.controller, :abstract_model => @abstract_model })
  export_action = export_action && authorized?(export_action.authorization_key, @abstract_model) ? export_action : nil

  properties = @model_config.list.with(:view => self, :object => @abstract_model.model.new).visible_fields
  # columns paginate
  @filterable_fields = @model_config.list.fields.select(&:filterable?)
  sets = get_column_sets(properties)
  properties = sets[params[:set].to_i] || []
  other_left = ((params[:set].to_i - 1) >= 0) && sets[params[:set].to_i - 1].present?
  other_right = sets[params[:set].to_i + 1].present?
  @index = 0
  @ordered_filters = (params[:f] || @model_config.list.filters).inject({}) { |memo, filter|
    field_name = filter.is_a?(Array) ? filter.first : filter
  (filter.is_a?(Array) ? filter.last : { (@index += 1) => { "value" => '' } }) .each do |index, filter_hash|
      unless filter_hash['disabled']
        memo[index] = { field_name => filter_hash }
      else
        params[:f].delete(field_name)
      end
    end
    memo
  }.to_a.sort_by(&:first)

  @ordered_filter_string = @ordered_filters.map do |duplet|
    filter_index = duplet[0]
    filter_for_field = duplet[1]
    filter_name = filter_for_field.keys.first
    filter_hash = filter_for_field.values.first
    field = @filterable_fields.find{ |field| field.name == filter_name.to_sym }
    field_options = case field.type
    when :enum
      options_for_select(field.with(:object => @abstract_model.model.new).enum, filter_hash['v']).gsub("\n", '')
    else
      ''
    end
    "$.filters.append('#{escape_javascript field.label.to_s}', '#{escape_javascript field.name.to_s}', '#{escape_javascript field.type.to_s}', '#{escape_javascript  filter_hash['v'].to_s}', '#{escape_javascript filter_hash['o'].to_s}', '#{escape_javascript field_options.to_s}', #{filter_hash['v'].is_a?(Array)}, '#{escape_javascript filter_index.to_s}');"
  end.join if @ordered_filters

  start_index = (((params[:page] || 1).to_i - 1) * (params[:per] || @model_config.list.items_per_page).to_i)

%style{:type => 'text/css'}
  :plain
    #order_items tbody tr {
      cursor: grab;
    }

    #order_items tbody tr:active {
      cursor: grabbed;
    }

#order_items{:'data-pjax-container' => true}
  = form_tag bulk_action_path(:model_name => @abstract_model.to_s), :method => :post, :id => "bulk_form", :class => "form" do
    = hidden_field_tag :bulk_action
    %table.table.table-condensed.table-striped
      %thead
        %tr
          %td{:style => 'font-weight:bold;text-align:center;background-color: rgba(141, 192, 219, 0.25);'}
            = t('admin.actions.order_items.column_title')
          - properties.each do |property|
            %th= property.label
      %tbody
        - current_index = start_index
        - @ordered_items.each do |object|
          %tr{ :style => "cursor:", :data => { :item_id => object.id } }
            %td
              = "<input class=\"order_index_input\" type=\"number\" name=\"item[#{object.id}]\" value=\"#{(current_index += 1)}\" length=\"3\" style=\"width:40px;text-align:center;margin:auto;display:block;\">".html_safe
            - properties.map{ |property| property.bind(:object, object) }.each do |property|
              - value = property.pretty_value
              %td{:class => "#{property.css_class} #{property.type_css_class}", :title => strip_tags(value)}= value
    - unless params[:all]
      - total_count = @objects.total_count
      = paginate(@objects, :theme => 'twitter-bootstrap', :remote => true)
      = link_to(t("admin.misc.show_all"), index_path(params.merge(:all => true)), :class => "show-all btn clearfix pjax") unless total_count > 100 || total_count <= @objects.size
      .clearfix.total-count= "#{total_count} #{@model_config.label_plural.downcase}"
    - else
      .clearfix.total-count= "#{@objects.size} #{@model_config.label_plural.downcase}"

#data_informations{:style => 'display:none;', :data => {:model_name => @abstract_model.to_param, :start_index => start_index}}

= javascript_include_tag 'rails_admin/order_items'